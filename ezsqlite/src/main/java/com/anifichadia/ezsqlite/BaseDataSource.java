/**
 * Copyright (C) 2016 Aniruddh Fichadia
 * <p/>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * <p/>
 * If you use or enhance the code, please let me know using the provided author information or via
 * email Ani.Fichadia@gmail.com.
 */

package com.anifichadia.ezsqlite;


import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * Utility class providing basic CRUD functionality for a single table in an Android SQLite
 * database. This class is suitable for simple objects (Objects without composite keys). <br />
 * <br />
 * Note: Row ID must be a {@link long} as it is used by SQLite insert operations.
 *
 * @param <T> Object type managed by data source
 * @author Aniruddh Fichadia | Email: Ani.Fichadia@gmail.com | GitHub Username: AniFichadia
 *         (http://github.com/AniFichadia)
 */
public abstract class BaseDataSource<T>
{
	protected final Context context;

	/**
	 * Database
	 */
	protected       SQLiteDatabase   database;
	/**
	 * Manages database creation and version management, can be just an {@link SQLiteOpenHelper} or
	 * {@link BaseSQLiteOpenHelper}
	 */
	protected final SQLiteOpenHelper openHelper;

	/**
	 * Table name
	 */
	protected final String   tableName;
	/**
	 * Table Id Field name
	 */
	protected final String   idFieldName;
	/**
	 * Array of all column names
	 */
	protected final String[] allColumnNames;

	/**
	 * Default row ordering for {@link #getAll()}, can be null for default ordering
	 */
	protected final String defaultOrderBy;


	public BaseDataSource(@NonNull Context context, @NonNull SQLiteOpenHelper openHelper,
	                      @NonNull String tableName, @NonNull String idColName,
	                      @Nullable String[] allColumnNames, @Nullable String defaultOrderBy)
	{
		this.context = context;

		this.openHelper = openHelper;

		this.tableName = tableName;
		this.idFieldName = idColName;
		this.allColumnNames = allColumnNames;
		this.defaultOrderBy = defaultOrderBy;
	}


	public BaseDataSource(@NonNull Context context, @NonNull SQLiteOpenHelper openHelper,
	                      @NonNull String tableName, @NonNull String idColName,
	                      @Nullable String[] allColumnNames)
	{
		this(context, openHelper, tableName, idColName, allColumnNames, null);
	}


	/**
	 * Open connection to database
	 *
	 * @throws SQLException
	 */
	public void open() throws SQLException
	{
		setDatabase(openHelper.getWritableDatabase());
	}


	/**
	 * Close connection to database
	 */
	public void close()
	{
		openHelper.close();
	}


	// Create


	/**
	 * Inserts an object into the table. The Id will be automatically generated by the
	 * database and returned with the inserted row
	 *
	 * @param value Object to be inserted into the database.
	 * @return The inserted entry from the database (uses {@link #get(long)} for the database
	 * generated id)
	 */
	public T insert(T value)
	{
		// Create ContentValues from provided object
		boolean       isUpdate = false;
		ContentValues values   = toRow(initializeContentValues(value, isUpdate), value, isUpdate);

		// Insert value into database and retrieve automatically generated id
		long insertId = database.insert(tableName, null, values);

		// Return inserted entry
		return get(insertId);
	}


	// Read


	/**
	 * Retrieve a row from the database using the specified row ID
	 *
	 * @param id ID of the row to retrieve
	 * @return Row with the specified id or null if no such row exists
	 */
	public T get(long id)
	{
		// Query the database for a row with the provided ID
		Cursor cursor = database.query(tableName, allColumnNames, idFieldName + " = " + id, null,
		                               null, null, null);

		// Move cursor to the first row. Used to check if the query has any results.
		boolean moveResult = cursor.moveToFirst();
		if (!moveResult) // return null for no entry
			return null;
		else
			// Convert object from a cursor object and return
			return fromRow(cursor);
	}


	/**
	 * Retrieve all rows from the table
	 *
	 * @return Collection containing all rows from the table
	 */
	public Collection<T> getAll()
	{
		return getAll(this.defaultOrderBy);
	}


	/**
	 * Retrieve all rows from the table
	 *
	 * @return Collection containing all rows from the table
	 */
	public Collection<T> getAll(String orderBy)
	{
		return getAllWhere(null, null, orderBy);
	}


	public Collection<T> getAllWhere(@Nullable String where, @Nullable String[] whereArgs,
	                                 @Nullable String orderBy)
	{
		// Query for all items in the database
		Cursor cursor = database.query(tableName, allColumnNames, where, whereArgs, null, null,
		                               orderBy);

		return cursorToList(cursor);
	}


	// Update


	/**
	 * Update value from the database using an object's id. ID used for update is the value
	 * returned
	 * by {@link #getIdFromObject(Object)}
	 *
	 * @param value Object to update row with
	 * @return The updated entry from the database (uses {@link #get(long)})
	 */
	public T update(T value)
	{
		// Get ID from object
		long id = getIdFromObject(value);

		// Create ContentValues from provided object
		boolean       isUpdate = true;
		ContentValues values   = toRow(initializeContentValues(value, isUpdate), value, isUpdate);

		// Run update query on database
		database.update(tableName, values, idFieldName + " = " + id, null);

		return get(id);
	}


	// Delete


	/**
	 * Delete a row from the database. ID used for deletion is the value returned by
	 * {@link #getIdFromObject(Object)}
	 *
	 * @param value Entry to delete from the database
	 */
	public boolean delete(T value)
	{
		// Get ID from object
		long id = getIdFromObject(value);

		// Perform delete operation
		int rowsAffected = database.delete(tableName, idFieldName + " = " + id, null);

		// Return success of delete operation
		return (rowsAffected > 0);
	}


	/**
	 * Drops the contents of the table
	 */
	public void dropTable()
	{
		database.execSQL("drop table if exists " + tableName);
	}


	/**
	 * Checks if the database contains a specific value.
	 * <p/>
	 * Default implementation uses uses the provided value's id. Implement your own custom
	 * {@link #contains(Object)} function if something else is required.
	 *
	 * @param value Value to check in database
	 * @return Boolean representing if the database contains a specific value
	 */
	public boolean contains(T value)
	{
		// Query the database for a row with the provided ID
		Cursor cursor = database.query(tableName, allColumnNames, idFieldName + " = ?",
		                               new String[]{getIdFromObject(value) + ""}, null, null,
		                               null);

		// Move cursor to the first row. Used to check if the query has any results.
		return cursor.moveToFirst();
	}


	/**
	 * Returns the number of rows in the table
	 */
	public long count()
	{
		return DatabaseUtils.queryNumEntries(database, tableName);
	}


	/**
	 * Helper method for {@link #toRow(ContentValues, Object, boolean)}. Sets up
	 * the
	 * {@link ContentValues} for inserting or updating a row.
	 */
	protected ContentValues initializeContentValues(T value, boolean isUpdate)
	{
		ContentValues values = new ContentValues();
		if (isUpdate) {
			values.put(idFieldName, getIdFromObject(value));
		} // Do nothing if false. Its unnecessary for insert operations

		return values;
	}


	@Nullable
	protected T getSingleRowFromCursor(Cursor cursor)
	{
		// Move cursor to the first row. Used to check if the query has any results.
		boolean moveResult = cursor.moveToFirst();
		if (!moveResult) // return null for no entry
			return null;
		else
			// Convert object from a cursor object and return
			return fromRow(cursor);
	}


	/**
	 * Clears all rows from the table
	 * <p/>
	 * Note: it is recommended that a truncate operation is implemented and used in a custom
	 * SQLiteOpenHelper class as truncation is more efficient than row deletions
	 */
	public boolean clear()
	{
		if (openHelper instanceof BaseSQLiteOpenHelper) {
			((BaseSQLiteOpenHelper) openHelper).truncateTable(database, tableName);
			return true;
		}

		return false;
	}


	/**
	 * Extracts an id value from an object. This method must be implemented as it is used by the
	 * provided methods
	 *
	 * @param value Object to extract the id value from
	 * @return ID of the object (which corresponds to a row in the table)
	 */
	protected abstract long getIdFromObject(T value);


	// Cursor operations


	/**
	 * Reads all rows in a cursor and returns them as a {@link List<T>)
	 *
	 * @param cursor
	 * @return
	 */
	protected List<T> cursorToList(Cursor cursor)
	{
		List<T> elems = new ArrayList<T>();

		// Move cursor to the first row
		cursor.moveToFirst();
		// Use cursor to iterate through all retrieved rows
		while (!cursor.isAfterLast()) {
			// Convert cursor to object and add to list
			T t = fromRow(cursor);
			if (t != null)
				elems.add(t);

			// Move to next item
			cursor.moveToNext();
		}

		return elems;
	}


	/**
	 * Converts a cursor object to an object of generic type T. Used so database rows can be
	 * retrieved as objects
	 *
	 * @param cursor Cursor to convert to an object
	 * @return Converted object
	 */
	protected abstract T fromRow(Cursor cursor);


	/**
	 * Converts an object into a ContentValues object either for a database update or insert
	 * operation. This method must be implemented as it is used in the default
	 * {@link #insert(Object)} and {@link #update(Object)} method implementations.
	 *
	 * @param value    Object to convert into a ContentValues object
	 * @param isUpdate Boolean representing if the operation is for database updates. This is used
	 *                 as the ContentValues object may not need modification specific to insert
	 *                 operations (eg. setting an ID)
	 * @return ContentValue object from value
	 */
	protected abstract ContentValues toRow(ContentValues contentValues, T value, boolean isUpdate);


	public Context getContext()
	{
		return context;
	}


	public SQLiteDatabase getDatabase()
	{
		return database;
	}


	public void setDatabase(SQLiteDatabase database)
	{
		this.database = database;
	}


	public SQLiteOpenHelper getOpenHelper()
	{
		return openHelper;
	}


	public String getTableName()
	{
		return tableName;
	}


	public String getIdFieldName()
	{
		return idFieldName;
	}


	public String[] getAllColumnNames()
	{
		return allColumnNames;
	}


	public String getDefaultOrderBy()
	{
		return defaultOrderBy;
	}
}